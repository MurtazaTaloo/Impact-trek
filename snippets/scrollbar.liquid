{%- comment -%}
----------------------------------------------------------------------------------------------------------------------
PROGRESS BAR COMPONENT
----------------------------------------------------------------------------------------------------------------------

This component is used in various scrollable section to show a custom scroll bar progress

********************************************
Supported variables
********************************************

* observes: the ID of the element being observed (or controlled)
* default_progress: the default progress advancement (between 0 and 1)
* show_buttons: if set to true prev/next buttons are also being shown
{%- endcomment -%}


<div class="scrollbar peer-not-scrollable:hidden" style="{{ center_scrollbar }}">
  <scroll-progress observes="{{ observes }}" class="scrollbar__progress" style="--scroll-progress: {{ default_progress }}"></scroll-progress>
  {%- if show_buttons -%}
    <div aria-controls="{{ observes }}" class="scrollbar__buttons">
      <button is="prev-button" class="circle-button ring group" aria-controls="{{ observes }}" disabled>
        <span class="sr-only">{{ 'general.accessibility.previous' | t }}</span>
        <span class="animated-arrow animated-arrow--reverse"></span>
      </button>

      <button is="next-button" class="circle-button ring group" aria-controls="{{ observes }}">
        <span class="sr-only">{{ 'general.accessibility.next' | t }}</span>
        <span class="animated-arrow"></span>
      </button>
    </div>
  {%- endif -%}
</div>

{% comment %}
  The following script only works when this scrollbar is on collection template and then helps to disable the default behaviour where the 'next button' was disabling before the whole horizontal scroll was complete.
{% endcomment %}
{% if template.name == "collection" %}
  
  <script>
    function initializeObserver() {
        const nextButton = document.querySelector('[is="next-button"]');
        const scrollProgress = document.querySelector('scroll-progress');
        if (nextButton && scrollProgress) {
            const observer = new MutationObserver(function(mutations) {
                mutations.forEach(function(mutation) {
                    if (mutation.attributeName === "style") {
                        const progress = parseFloat(scrollProgress.style.getPropertyValue('--scroll-progress'));

                        if (progress < 1) {
                            nextButton.removeAttribute('disabled');
                        } else if (progress === 1) {
                            nextButton.setAttribute('disabled', '');
                        }
                    }
                });
            });

            observer.observe(scrollProgress, { attributes: true, attributeFilter: ['style'] });
        }
    }

    document.addEventListener('DOMContentLoaded', initializeObserver);

    // Listen to the DOM changes (due to AJAX pagination, etc.) and reapply the logic
    const bodyObserver = new MutationObserver(function() {
        initializeObserver();
    });

    bodyObserver.observe(document.body, { childList: true, subtree: true });
  </script>
{% endif %}

